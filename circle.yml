---
machine:
  services:
    - docker
  # ghc:
  #   version: lts-7.4

  environment:
    DOCKER_REPO: jhr007/postgrest
    # Assumes empty tag means branch master, :latest
    DOCKER_IMAGE_TAG: ${CIRCLE_TAG:-latest}
    POSTGREST_SRC: ${POSTGREST_SRC:-/srv/postgrest}
    RELEASE_DIR: ${POSTGREST_SRC}/.release
    STACK_WORK: ${POSTGREST_SRC}/.stack-work
    DEPLOY_OWNER: ${DEPLOY_OWNER:-${CIRCLE_PROJECT_USERNAME:-jhr007}}

dependencies:
  cache_directories:
    - "~/.stack"
    - "~/.stack-work"
    - "~/.docker"
    - ".release"
  override:
    - docker info
    # - if [[ -z CIRCLE_BRANCH ]];
    - if [[ ! -d ~/.stack ]]; then mkdir -p ~/.stack; fi
    - if [[ -d .release ]]; then rm -rf .release; fi && mkdir -p .release

    #Reuse docker image
    - if [[ -e ~/.docker/image.tar ]]; then docker load --input ~/.docker/image.tar; fi
    - docker build --rm=false -f Dockerfile.development -t ${DOCKER_REPO}dev .
    - mkdir -p ~/.docker; docker save ${DOCKER_REPO}dev > ~/.docker/image.tar

    - docker run -v ~/.stack:/root/.stack -v ~/.stack-work:${STACK_WORK} -i ${DOCKER_REPO}dev
                cabal update
    - docker run -v ~/.stack:/root/.stack -v ~/.stack-work:${STACK_WORK} -i ${DOCKER_REPO}dev
                stack install --allow-different-user hlint packdeps
    - docker run -v ~/.stack:/root/.stack -v ~/.stack-work:${STACK_WORK} -i ${DOCKER_REPO}dev
                stack build --allow-different-user --fast
    - docker run -v ~/.stack:/root/.stack -v ~/.stack-work:${STACK_WORK} -i ${DOCKER_REPO}dev
                stack build --allow-different-user --fast --test --no-run-tests



## Not Yet carried to this circleci.yml

    # - createuser --superuser --no-password postgrest_test
    # - createdb -O postgrest_test -U ubuntu postgrest_test

    # todo ?? Command fails...  build 33 ... subshells evaluated on circle host(should...) or inside docker?
    # - docker run -v ~/.stack:/root/.stack -v ~/.stack-work:${STACK_WORK} -i ${DOCKER_REPO}dev /bin/bash
    #             eval 'rm -fr $(stack path --dist-dir)'
    # - rm -fr $(stack path --dist-dir) $(stack path --local-install-root)


    #   - stack install hlint packdeps cabal-install
    #   - stack build --fast
    #   - stack build --fast --test --no-run-tests

test:
  override:
    - echo "Tests go here.. use stack's support for docker here?"
#     - stack test --test-arguments "--skip \"returns a valid openapi\""
#     - git ls-files | grep '\.l\?hs$' | xargs stack exec -- hlint -X QuasiQuotes -X NoPatternSynonyms "$@"
#     - stack exec -- cabal update
#     - stack exec --no-ghc-package-path -- cabal install --only-d --dry-run
#     - stack exec -- packdeps *.cabal || true
#     - stack exec -- cabal check
#     - stack  --no-haddock-deps
#     - stack sdist
  post:
    - ls -al
    - du -sh . | sort -h
    - lsdirs=(*); unset lsdirs[0]; unset lsdirs[1]; du -sh ${lsdirs[@]}
    - docker run -v ~/.stack:/root/.stack -v ~/.stack-work:${STACK_WORK} -v ${PWD}/.release:${RELEASE_DIR} -i ${DOCKER_REPO}dev
                    stack install --allow-different-user --local-bin-path ${RELEASE_DIR}
    - if [[ ! -e .release/postgrest ]]; then echo '.release/postgrest doesnt exist'; exit 1; fi
    - docker build --rm=false -f Dockerfile -t ${DOCKER_REPO}:${DOCKER_IMAGE_TAG} .
    # - docker run -d -p 3000:3000 ${DOCKER_REPO}; sleep 10
    # - curl --retry 10 --retry-delay 5 -v http://localhost:3000

deployment:
  hub:
    branch: /^master$/
    commands:
      - docker login -e $DOCKER_EMAIL -u $DOCKER_USER -p $DOCKER_PASS
      - docker push ${DOCKER_REPO}:${DOCKER_IMAGE_TAG}

  release:
    tag: /v[0-9]+(\.[0-9]+)*/
    owner: ${DEPLOY_OWNER}
    commands:
      - docker login -e $DOCKER_EMAIL -u $DOCKER_USER -p $DOCKER_PASS
      - docker push ${DOCKER_REPO}:${DOCKER_IMAGE_TAG}
